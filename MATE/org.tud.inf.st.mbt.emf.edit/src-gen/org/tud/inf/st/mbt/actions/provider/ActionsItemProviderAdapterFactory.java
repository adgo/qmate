/**
 */
package org.tud.inf.st.mbt.actions.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.tud.inf.st.mbt.actions.util.ActionsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ActionsItemProviderAdapterFactory extends ActionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ActionsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.PreGenerationSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreGenerationSequenceItemProvider preGenerationSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.PreGenerationSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreGenerationSequenceAdapter() {
		if (preGenerationSequenceItemProvider == null) {
			preGenerationSequenceItemProvider = new PreGenerationSequenceItemProvider(this);
		}

		return preGenerationSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.PostGenerationSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostGenerationSequenceItemProvider postGenerationSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.PostGenerationSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPostGenerationSequenceAdapter() {
		if (postGenerationSequenceItemProvider == null) {
			postGenerationSequenceItemProvider = new PostGenerationSequenceItemProvider(this);
		}

		return postGenerationSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.ThrowAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThrowActionItemProvider throwActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.ThrowAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThrowActionAdapter() {
		if (throwActionItemProvider == null) {
			throwActionItemProvider = new ThrowActionItemProvider(this);
		}

		return throwActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.TermAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TermActionItemProvider termActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.TermAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTermActionAdapter() {
		if (termActionItemProvider == null) {
			termActionItemProvider = new TermActionItemProvider(this);
		}

		return termActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.SetDataAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetDataActionItemProvider setDataActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.SetDataAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetDataActionAdapter() {
		if (setDataActionItemProvider == null) {
			setDataActionItemProvider = new SetDataActionItemProvider(this);
		}

		return setDataActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.RemoveBagAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RemoveBagActionItemProvider removeBagActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.RemoveBagAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRemoveBagActionAdapter() {
		if (removeBagActionItemProvider == null) {
			removeBagActionItemProvider = new RemoveBagActionItemProvider(this);
		}

		return removeBagActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.ActivateFeatureAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivateFeatureActionItemProvider activateFeatureActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.ActivateFeatureAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivateFeatureActionAdapter() {
		if (activateFeatureActionItemProvider == null) {
			activateFeatureActionItemProvider = new ActivateFeatureActionItemProvider(this);
		}

		return activateFeatureActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.DeactivateFeatureAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeactivateFeatureActionItemProvider deactivateFeatureActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.DeactivateFeatureAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeactivateFeatureActionAdapter() {
		if (deactivateFeatureActionItemProvider == null) {
			deactivateFeatureActionItemProvider = new DeactivateFeatureActionItemProvider(this);
		}

		return deactivateFeatureActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.GetDataAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetDataActionItemProvider getDataActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.GetDataAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetDataActionAdapter() {
		if (getDataActionItemProvider == null) {
			getDataActionItemProvider = new GetDataActionItemProvider(this);
		}

		return getDataActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.SetPropertyAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetPropertyActionItemProvider setPropertyActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.SetPropertyAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetPropertyActionAdapter() {
		if (setPropertyActionItemProvider == null) {
			setPropertyActionItemProvider = new SetPropertyActionItemProvider(this);
		}

		return setPropertyActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.GetPropertyAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetPropertyActionItemProvider getPropertyActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.GetPropertyAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetPropertyActionAdapter() {
		if (getPropertyActionItemProvider == null) {
			getPropertyActionItemProvider = new GetPropertyActionItemProvider(this);
		}

		return getPropertyActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.GetRealTimeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetRealTimeActionItemProvider getRealTimeActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.GetRealTimeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetRealTimeActionAdapter() {
		if (getRealTimeActionItemProvider == null) {
			getRealTimeActionItemProvider = new GetRealTimeActionItemProvider(this);
		}

		return getRealTimeActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.GetFeatureStateAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetFeatureStateActionItemProvider getFeatureStateActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.GetFeatureStateAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetFeatureStateActionAdapter() {
		if (getFeatureStateActionItemProvider == null) {
			getFeatureStateActionItemProvider = new GetFeatureStateActionItemProvider(this);
		}

		return getFeatureStateActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.FailAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FailActionItemProvider failActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.FailAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFailActionAdapter() {
		if (failActionItemProvider == null) {
			failActionItemProvider = new FailActionItemProvider(this);
		}

		return failActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.StandAloneAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandAloneActionItemProvider standAloneActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.StandAloneAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandAloneActionAdapter() {
		if (standAloneActionItemProvider == null) {
			standAloneActionItemProvider = new StandAloneActionItemProvider(this);
		}

		return standAloneActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.TimedConditionAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedConditionActionItemProvider timedConditionActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.TimedConditionAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedConditionActionAdapter() {
		if (timedConditionActionItemProvider == null) {
			timedConditionActionItemProvider = new TimedConditionActionItemProvider(this);
		}

		return timedConditionActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.ActionReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionReferenceItemProvider actionReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.ActionReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionReferenceAdapter() {
		if (actionReferenceItemProvider == null) {
			actionReferenceItemProvider = new ActionReferenceItemProvider(this);
		}

		return actionReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.actions.TimeAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeActionItemProvider timeActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.actions.TimeAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeActionAdapter() {
		if (timeActionItemProvider == null) {
			timeActionItemProvider = new TimeActionItemProvider(this);
		}

		return timeActionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (actionReferenceItemProvider != null) actionReferenceItemProvider.dispose();
		if (standAloneActionItemProvider != null) standAloneActionItemProvider.dispose();
		if (timedConditionActionItemProvider != null) timedConditionActionItemProvider.dispose();
		if (preGenerationSequenceItemProvider != null) preGenerationSequenceItemProvider.dispose();
		if (postGenerationSequenceItemProvider != null) postGenerationSequenceItemProvider.dispose();
		if (throwActionItemProvider != null) throwActionItemProvider.dispose();
		if (termActionItemProvider != null) termActionItemProvider.dispose();
		if (setDataActionItemProvider != null) setDataActionItemProvider.dispose();
		if (getDataActionItemProvider != null) getDataActionItemProvider.dispose();
		if (removeBagActionItemProvider != null) removeBagActionItemProvider.dispose();
		if (activateFeatureActionItemProvider != null) activateFeatureActionItemProvider.dispose();
		if (deactivateFeatureActionItemProvider != null) deactivateFeatureActionItemProvider.dispose();
		if (setPropertyActionItemProvider != null) setPropertyActionItemProvider.dispose();
		if (failActionItemProvider != null) failActionItemProvider.dispose();
		if (timeActionItemProvider != null) timeActionItemProvider.dispose();
		if (getPropertyActionItemProvider != null) getPropertyActionItemProvider.dispose();
		if (getRealTimeActionItemProvider != null) getRealTimeActionItemProvider.dispose();
		if (getFeatureStateActionItemProvider != null) getFeatureStateActionItemProvider.dispose();
	}

}
