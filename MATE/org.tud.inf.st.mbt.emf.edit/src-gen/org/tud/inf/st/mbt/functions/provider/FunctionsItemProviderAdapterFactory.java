/**
 */
package org.tud.inf.st.mbt.functions.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.tud.inf.st.mbt.functions.util.FunctionsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FunctionsItemProviderAdapterFactory extends FunctionsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FunctionsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.FunctionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionVariableItemProvider functionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.FunctionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionVariableAdapter() {
		if (functionVariableItemProvider == null) {
			functionVariableItemProvider = new FunctionVariableItemProvider(this);
		}

		return functionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ArithmetricFunctionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmetricFunctionVariableItemProvider arithmetricFunctionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ArithmetricFunctionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmetricFunctionVariableAdapter() {
		if (arithmetricFunctionVariableItemProvider == null) {
			arithmetricFunctionVariableItemProvider = new ArithmetricFunctionVariableItemProvider(this);
		}

		return arithmetricFunctionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataNodeFunctionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataNodeFunctionVariableItemProvider dataNodeFunctionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataNodeFunctionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataNodeFunctionVariableAdapter() {
		if (dataNodeFunctionVariableItemProvider == null) {
			dataNodeFunctionVariableItemProvider = new DataNodeFunctionVariableItemProvider(this);
		}

		return dataNodeFunctionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ValueFunctionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueFunctionVariableItemProvider valueFunctionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ValueFunctionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueFunctionVariableAdapter() {
		if (valueFunctionVariableItemProvider == null) {
			valueFunctionVariableItemProvider = new ValueFunctionVariableItemProvider(this);
		}

		return valueFunctionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.LogicStandAloneFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicStandAloneFunctionItemProvider logicStandAloneFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.LogicStandAloneFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicStandAloneFunctionAdapter() {
		if (logicStandAloneFunctionItemProvider == null) {
			logicStandAloneFunctionItemProvider = new LogicStandAloneFunctionItemProvider(this);
		}

		return logicStandAloneFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.LogicReferenceFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicReferenceFunctionItemProvider logicReferenceFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.LogicReferenceFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicReferenceFunctionAdapter() {
		if (logicReferenceFunctionItemProvider == null) {
			logicReferenceFunctionItemProvider = new LogicReferenceFunctionItemProvider(this);
		}

		return logicReferenceFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.LogicFunctionVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicFunctionVariableItemProvider logicFunctionVariableItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.LogicFunctionVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicFunctionVariableAdapter() {
		if (logicFunctionVariableItemProvider == null) {
			logicFunctionVariableItemProvider = new LogicFunctionVariableItemProvider(this);
		}

		return logicFunctionVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.SubClassFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubClassFunctionItemProvider subClassFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.SubClassFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubClassFunctionAdapter() {
		if (subClassFunctionItemProvider == null) {
			subClassFunctionItemProvider = new SubClassFunctionItemProvider(this);
		}

		return subClassFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.PredicateFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PredicateFunctionItemProvider predicateFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.PredicateFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPredicateFunctionAdapter() {
		if (predicateFunctionItemProvider == null) {
			predicateFunctionItemProvider = new PredicateFunctionItemProvider(this);
		}

		return predicateFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.FeatureTreeValidFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureTreeValidFunctionItemProvider featureTreeValidFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.FeatureTreeValidFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureTreeValidFunctionAdapter() {
		if (featureTreeValidFunctionItemProvider == null) {
			featureTreeValidFunctionItemProvider = new FeatureTreeValidFunctionItemProvider(this);
		}

		return featureTreeValidFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.EqualFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualFunctionItemProvider equalFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.EqualFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualFunctionAdapter() {
		if (equalFunctionItemProvider == null) {
			equalFunctionItemProvider = new EqualFunctionItemProvider(this);
		}

		return equalFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.LargerThanFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LargerThanFunctionItemProvider largerThanFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.LargerThanFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLargerThanFunctionAdapter() {
		if (largerThanFunctionItemProvider == null) {
			largerThanFunctionItemProvider = new LargerThanFunctionItemProvider(this);
		}

		return largerThanFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.LowerThanFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LowerThanFunctionItemProvider lowerThanFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.LowerThanFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLowerThanFunctionAdapter() {
		if (lowerThanFunctionItemProvider == null) {
			lowerThanFunctionItemProvider = new LowerThanFunctionItemProvider(this);
		}

		return lowerThanFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ArithmetricStandAloneFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmetricStandAloneFunctionItemProvider arithmetricStandAloneFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ArithmetricStandAloneFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmetricStandAloneFunctionAdapter() {
		if (arithmetricStandAloneFunctionItemProvider == null) {
			arithmetricStandAloneFunctionItemProvider = new ArithmetricStandAloneFunctionItemProvider(this);
		}

		return arithmetricStandAloneFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.PlusFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlusFunctionItemProvider plusFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.PlusFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlusFunctionAdapter() {
		if (plusFunctionItemProvider == null) {
			plusFunctionItemProvider = new PlusFunctionItemProvider(this);
		}

		return plusFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.SubFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubFunctionItemProvider subFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.SubFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubFunctionAdapter() {
		if (subFunctionItemProvider == null) {
			subFunctionItemProvider = new SubFunctionItemProvider(this);
		}

		return subFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.MinusFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinusFunctionItemProvider minusFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.MinusFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinusFunctionAdapter() {
		if (minusFunctionItemProvider == null) {
			minusFunctionItemProvider = new MinusFunctionItemProvider(this);
		}

		return minusFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.MultiplyFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MultiplyFunctionItemProvider multiplyFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.MultiplyFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMultiplyFunctionAdapter() {
		if (multiplyFunctionItemProvider == null) {
			multiplyFunctionItemProvider = new MultiplyFunctionItemProvider(this);
		}

		return multiplyFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DivisionFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DivisionFunctionItemProvider divisionFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DivisionFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDivisionFunctionAdapter() {
		if (divisionFunctionItemProvider == null) {
			divisionFunctionItemProvider = new DivisionFunctionItemProvider(this);
		}

		return divisionFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.FloatFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatFunctionItemProvider floatFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.FloatFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatFunctionAdapter() {
		if (floatFunctionItemProvider == null) {
			floatFunctionItemProvider = new FloatFunctionItemProvider(this);
		}

		return floatFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.IntFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntFunctionItemProvider intFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.IntFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntFunctionAdapter() {
		if (intFunctionItemProvider == null) {
			intFunctionItemProvider = new IntFunctionItemProvider(this);
		}

		return intFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.LongFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongFunctionItemProvider longFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.LongFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongFunctionAdapter() {
		if (longFunctionItemProvider == null) {
			longFunctionItemProvider = new LongFunctionItemProvider(this);
		}

		return longFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.BagCountFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BagCountFunctionItemProvider bagCountFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.BagCountFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBagCountFunctionAdapter() {
		if (bagCountFunctionItemProvider == null) {
			bagCountFunctionItemProvider = new BagCountFunctionItemProvider(this);
		}

		return bagCountFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.BagIdxFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BagIdxFunctionItemProvider bagIdxFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.BagIdxFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBagIdxFunctionAdapter() {
		if (bagIdxFunctionItemProvider == null) {
			bagIdxFunctionItemProvider = new BagIdxFunctionItemProvider(this);
		}

		return bagIdxFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.BagSizeFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BagSizeFunctionItemProvider bagSizeFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.BagSizeFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBagSizeFunctionAdapter() {
		if (bagSizeFunctionItemProvider == null) {
			bagSizeFunctionItemProvider = new BagSizeFunctionItemProvider(this);
		}

		return bagSizeFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.BagNextFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BagNextFunctionItemProvider bagNextFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.BagNextFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBagNextFunctionAdapter() {
		if (bagNextFunctionItemProvider == null) {
			bagNextFunctionItemProvider = new BagNextFunctionItemProvider(this);
		}

		return bagNextFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.BagFirstFreeFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BagFirstFreeFunctionItemProvider bagFirstFreeFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.BagFirstFreeFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBagFirstFreeFunctionAdapter() {
		if (bagFirstFreeFunctionItemProvider == null) {
			bagFirstFreeFunctionItemProvider = new BagFirstFreeFunctionItemProvider(this);
		}

		return bagFirstFreeFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.TimeFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeFunctionItemProvider timeFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.TimeFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeFunctionAdapter() {
		if (timeFunctionItemProvider == null) {
			timeFunctionItemProvider = new TimeFunctionItemProvider(this);
		}

		return timeFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.TokenFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenFunctionItemProvider tokenFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.TokenFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenFunctionAdapter() {
		if (tokenFunctionItemProvider == null) {
			tokenFunctionItemProvider = new TokenFunctionItemProvider(this);
		}

		return tokenFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ArithmetricCaseFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmetricCaseFunctionItemProvider arithmetricCaseFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ArithmetricCaseFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmetricCaseFunctionAdapter() {
		if (arithmetricCaseFunctionItemProvider == null) {
			arithmetricCaseFunctionItemProvider = new ArithmetricCaseFunctionItemProvider(this);
		}

		return arithmetricCaseFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ArithmetricCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmetricCaseItemProvider arithmetricCaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ArithmetricCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmetricCaseAdapter() {
		if (arithmetricCaseItemProvider == null) {
			arithmetricCaseItemProvider = new ArithmetricCaseItemProvider(this);
		}

		return arithmetricCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ValueCaseFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueCaseFunctionItemProvider valueCaseFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ValueCaseFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueCaseFunctionAdapter() {
		if (valueCaseFunctionItemProvider == null) {
			valueCaseFunctionItemProvider = new ValueCaseFunctionItemProvider(this);
		}

		return valueCaseFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ValueCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueCaseItemProvider valueCaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ValueCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueCaseAdapter() {
		if (valueCaseItemProvider == null) {
			valueCaseItemProvider = new ValueCaseItemProvider(this);
		}

		return valueCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataNodeCaseFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataNodeCaseFunctionItemProvider dataNodeCaseFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataNodeCaseFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataNodeCaseFunctionAdapter() {
		if (dataNodeCaseFunctionItemProvider == null) {
			dataNodeCaseFunctionItemProvider = new DataNodeCaseFunctionItemProvider(this);
		}

		return dataNodeCaseFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataNodeCase} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataNodeCaseItemProvider dataNodeCaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataNodeCase}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataNodeCaseAdapter() {
		if (dataNodeCaseItemProvider == null) {
			dataNodeCaseItemProvider = new DataNodeCaseItemProvider(this);
		}

		return dataNodeCaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ArithmetricReferenceFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArithmetricReferenceFunctionItemProvider arithmetricReferenceFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ArithmetricReferenceFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArithmetricReferenceFunctionAdapter() {
		if (arithmetricReferenceFunctionItemProvider == null) {
			arithmetricReferenceFunctionItemProvider = new ArithmetricReferenceFunctionItemProvider(this);
		}

		return arithmetricReferenceFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataNodeStandAloneFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataNodeStandAloneFunctionItemProvider dataNodeStandAloneFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataNodeStandAloneFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataNodeStandAloneFunctionAdapter() {
		if (dataNodeStandAloneFunctionItemProvider == null) {
			dataNodeStandAloneFunctionItemProvider = new DataNodeStandAloneFunctionItemProvider(this);
		}

		return dataNodeStandAloneFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataNodeReferenceFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataNodeReferenceFunctionItemProvider dataNodeReferenceFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataNodeReferenceFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataNodeReferenceFunctionAdapter() {
		if (dataNodeReferenceFunctionItemProvider == null) {
			dataNodeReferenceFunctionItemProvider = new DataNodeReferenceFunctionItemProvider(this);
		}

		return dataNodeReferenceFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ValueStandAloneFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueStandAloneFunctionItemProvider valueStandAloneFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ValueStandAloneFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueStandAloneFunctionAdapter() {
		if (valueStandAloneFunctionItemProvider == null) {
			valueStandAloneFunctionItemProvider = new ValueStandAloneFunctionItemProvider(this);
		}

		return valueStandAloneFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.ValueReferenceFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueReferenceFunctionItemProvider valueReferenceFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.ValueReferenceFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueReferenceFunctionAdapter() {
		if (valueReferenceFunctionItemProvider == null) {
			valueReferenceFunctionItemProvider = new ValueReferenceFunctionItemProvider(this);
		}

		return valueReferenceFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataNodeFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataNodeFunctionItemProvider dataNodeFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataNodeFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataNodeFunctionAdapter() {
		if (dataNodeFunctionItemProvider == null) {
			dataNodeFunctionItemProvider = new DataNodeFunctionItemProvider(this);
		}

		return dataNodeFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.BagElementFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BagElementFunctionItemProvider bagElementFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.BagElementFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBagElementFunctionAdapter() {
		if (bagElementFunctionItemProvider == null) {
			bagElementFunctionItemProvider = new BagElementFunctionItemProvider(this);
		}

		return bagElementFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataNodeValueFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataNodeValueFunctionItemProvider dataNodeValueFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataNodeValueFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataNodeValueFunctionAdapter() {
		if (dataNodeValueFunctionItemProvider == null) {
			dataNodeValueFunctionItemProvider = new DataNodeValueFunctionItemProvider(this);
		}

		return dataNodeValueFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.functions.DataValueFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataValueFunctionItemProvider dataValueFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.functions.DataValueFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataValueFunctionAdapter() {
		if (dataValueFunctionItemProvider == null) {
			dataValueFunctionItemProvider = new DataValueFunctionItemProvider(this);
		}

		return dataValueFunctionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (functionVariableItemProvider != null) functionVariableItemProvider.dispose();
		if (arithmetricStandAloneFunctionItemProvider != null) arithmetricStandAloneFunctionItemProvider.dispose();
		if (arithmetricReferenceFunctionItemProvider != null) arithmetricReferenceFunctionItemProvider.dispose();
		if (arithmetricFunctionVariableItemProvider != null) arithmetricFunctionVariableItemProvider.dispose();
		if (dataNodeStandAloneFunctionItemProvider != null) dataNodeStandAloneFunctionItemProvider.dispose();
		if (dataNodeReferenceFunctionItemProvider != null) dataNodeReferenceFunctionItemProvider.dispose();
		if (dataNodeFunctionVariableItemProvider != null) dataNodeFunctionVariableItemProvider.dispose();
		if (valueStandAloneFunctionItemProvider != null) valueStandAloneFunctionItemProvider.dispose();
		if (valueReferenceFunctionItemProvider != null) valueReferenceFunctionItemProvider.dispose();
		if (valueFunctionVariableItemProvider != null) valueFunctionVariableItemProvider.dispose();
		if (logicStandAloneFunctionItemProvider != null) logicStandAloneFunctionItemProvider.dispose();
		if (logicReferenceFunctionItemProvider != null) logicReferenceFunctionItemProvider.dispose();
		if (logicFunctionVariableItemProvider != null) logicFunctionVariableItemProvider.dispose();
		if (subClassFunctionItemProvider != null) subClassFunctionItemProvider.dispose();
		if (predicateFunctionItemProvider != null) predicateFunctionItemProvider.dispose();
		if (featureTreeValidFunctionItemProvider != null) featureTreeValidFunctionItemProvider.dispose();
		if (equalFunctionItemProvider != null) equalFunctionItemProvider.dispose();
		if (largerThanFunctionItemProvider != null) largerThanFunctionItemProvider.dispose();
		if (lowerThanFunctionItemProvider != null) lowerThanFunctionItemProvider.dispose();
		if (plusFunctionItemProvider != null) plusFunctionItemProvider.dispose();
		if (subFunctionItemProvider != null) subFunctionItemProvider.dispose();
		if (minusFunctionItemProvider != null) minusFunctionItemProvider.dispose();
		if (multiplyFunctionItemProvider != null) multiplyFunctionItemProvider.dispose();
		if (divisionFunctionItemProvider != null) divisionFunctionItemProvider.dispose();
		if (floatFunctionItemProvider != null) floatFunctionItemProvider.dispose();
		if (intFunctionItemProvider != null) intFunctionItemProvider.dispose();
		if (longFunctionItemProvider != null) longFunctionItemProvider.dispose();
		if (bagCountFunctionItemProvider != null) bagCountFunctionItemProvider.dispose();
		if (bagIdxFunctionItemProvider != null) bagIdxFunctionItemProvider.dispose();
		if (bagSizeFunctionItemProvider != null) bagSizeFunctionItemProvider.dispose();
		if (bagNextFunctionItemProvider != null) bagNextFunctionItemProvider.dispose();
		if (bagFirstFreeFunctionItemProvider != null) bagFirstFreeFunctionItemProvider.dispose();
		if (timeFunctionItemProvider != null) timeFunctionItemProvider.dispose();
		if (tokenFunctionItemProvider != null) tokenFunctionItemProvider.dispose();
		if (dataNodeFunctionItemProvider != null) dataNodeFunctionItemProvider.dispose();
		if (bagElementFunctionItemProvider != null) bagElementFunctionItemProvider.dispose();
		if (dataNodeValueFunctionItemProvider != null) dataNodeValueFunctionItemProvider.dispose();
		if (dataValueFunctionItemProvider != null) dataValueFunctionItemProvider.dispose();
		if (arithmetricCaseFunctionItemProvider != null) arithmetricCaseFunctionItemProvider.dispose();
		if (arithmetricCaseItemProvider != null) arithmetricCaseItemProvider.dispose();
		if (valueCaseFunctionItemProvider != null) valueCaseFunctionItemProvider.dispose();
		if (valueCaseItemProvider != null) valueCaseItemProvider.dispose();
		if (dataNodeCaseFunctionItemProvider != null) dataNodeCaseFunctionItemProvider.dispose();
		if (dataNodeCaseItemProvider != null) dataNodeCaseItemProvider.dispose();
	}

}
