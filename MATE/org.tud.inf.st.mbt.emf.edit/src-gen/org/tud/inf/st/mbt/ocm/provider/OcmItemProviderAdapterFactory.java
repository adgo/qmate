/**
 */
package org.tud.inf.st.mbt.ocm.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.tud.inf.st.mbt.ocm.util.OcmAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class OcmItemProviderAdapterFactory extends OcmAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public OcmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.ocm.OperationalConfigurationModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationalConfigurationModelItemProvider operationalConfigurationModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.ocm.OperationalConfigurationModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationalConfigurationModelAdapter() {
		if (operationalConfigurationModelItemProvider == null) {
			operationalConfigurationModelItemProvider = new OperationalConfigurationModelItemProvider(this);
		}

		return operationalConfigurationModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.ocm.StandardConfigurationNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StandardConfigurationNodeItemProvider standardConfigurationNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.ocm.StandardConfigurationNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStandardConfigurationNodeAdapter() {
		if (standardConfigurationNodeItemProvider == null) {
			standardConfigurationNodeItemProvider = new StandardConfigurationNodeItemProvider(this);
		}

		return standardConfigurationNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.ocm.ReconfigurationActionNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReconfigurationActionNodeItemProvider reconfigurationActionNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.ocm.ReconfigurationActionNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReconfigurationActionNodeAdapter() {
		if (reconfigurationActionNodeItemProvider == null) {
			reconfigurationActionNodeItemProvider = new ReconfigurationActionNodeItemProvider(this);
		}

		return reconfigurationActionNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.ocm.ComposedConfigurationNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedConfigurationNodeItemProvider composedConfigurationNodeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.ocm.ComposedConfigurationNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComposedConfigurationNodeAdapter() {
		if (composedConfigurationNodeItemProvider == null) {
			composedConfigurationNodeItemProvider = new ComposedConfigurationNodeItemProvider(this);
		}

		return composedConfigurationNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.ocm.CompositionEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositionEdgeItemProvider compositionEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.ocm.CompositionEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositionEdgeAdapter() {
		if (compositionEdgeItemProvider == null) {
			compositionEdgeItemProvider = new CompositionEdgeItemProvider(this);
		}

		return compositionEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.ocm.TimedEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimedEdgeItemProvider timedEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.ocm.TimedEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimedEdgeAdapter() {
		if (timedEdgeItemProvider == null) {
			timedEdgeItemProvider = new TimedEdgeItemProvider(this);
		}

		return timedEdgeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.ocm.EventGuardedEdge} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventGuardedEdgeItemProvider eventGuardedEdgeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.ocm.EventGuardedEdge}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventGuardedEdgeAdapter() {
		if (eventGuardedEdgeItemProvider == null) {
			eventGuardedEdgeItemProvider = new EventGuardedEdgeItemProvider(this);
		}

		return eventGuardedEdgeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (operationalConfigurationModelItemProvider != null) operationalConfigurationModelItemProvider.dispose();
		if (standardConfigurationNodeItemProvider != null) standardConfigurationNodeItemProvider.dispose();
		if (reconfigurationActionNodeItemProvider != null) reconfigurationActionNodeItemProvider.dispose();
		if (composedConfigurationNodeItemProvider != null) composedConfigurationNodeItemProvider.dispose();
		if (compositionEdgeItemProvider != null) compositionEdgeItemProvider.dispose();
		if (timedEdgeItemProvider != null) timedEdgeItemProvider.dispose();
		if (eventGuardedEdgeItemProvider != null) eventGuardedEdgeItemProvider.dispose();
	}

}
