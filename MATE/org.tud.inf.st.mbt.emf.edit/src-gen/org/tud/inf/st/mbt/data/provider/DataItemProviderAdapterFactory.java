/**
 */
package org.tud.inf.st.mbt.data.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.tud.inf.st.mbt.data.util.DataAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DataItemProviderAdapterFactory extends DataAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DataItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataStructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataStructureItemProvider dataStructureItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataStructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataStructureAdapter() {
		if (dataStructureItemProvider == null) {
			dataStructureItemProvider = new DataStructureItemProvider(this);
		}

		return dataStructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataLeaf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataLeafItemProvider dataLeafItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataLeaf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataLeafAdapter() {
		if (dataLeafItemProvider == null) {
			dataLeafItemProvider = new DataLeafItemProvider(this);
		}

		return dataLeafItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataClassItemProvider dataClassItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataClassAdapter() {
		if (dataClassItemProvider == null) {
			dataClassItemProvider = new DataClassItemProvider(this);
		}

		return dataClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataValueItemProvider dataValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataValueAdapter() {
		if (dataValueItemProvider == null) {
			dataValueItemProvider = new DataValueItemProvider(this);
		}

		return dataValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataBindingItemProvider dataBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataBindingAdapter() {
		if (dataBindingItemProvider == null) {
			dataBindingItemProvider = new DataBindingItemProvider(this);
		}

		return dataBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.StepDataBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepDataBindingItemProvider stepDataBindingItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.StepDataBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepDataBindingAdapter() {
		if (stepDataBindingItemProvider == null) {
			stepDataBindingItemProvider = new StepDataBindingItemProvider(this);
		}

		return stepDataBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataScenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataScenarioItemProvider dataScenarioItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataScenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataScenarioAdapter() {
		if (dataScenarioItemProvider == null) {
			dataScenarioItemProvider = new DataScenarioItemProvider(this);
		}

		return dataScenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataRangeItemProvider dataRangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataRangeAdapter() {
		if (dataRangeItemProvider == null) {
			dataRangeItemProvider = new DataRangeItemProvider(this);
		}

		return dataRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.DataBag} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataBagItemProvider dataBagItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.DataBag}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataBagAdapter() {
		if (dataBagItemProvider == null) {
			dataBagItemProvider = new DataBagItemProvider(this);
		}

		return dataBagItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.TypedDataClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TypedDataClassItemProvider typedDataClassItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.TypedDataClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTypedDataClassAdapter() {
		if (typedDataClassItemProvider == null) {
			typedDataClassItemProvider = new TypedDataClassItemProvider(this);
		}

		return typedDataClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.IntDataValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntDataValueItemProvider intDataValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.IntDataValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntDataValueAdapter() {
		if (intDataValueItemProvider == null) {
			intDataValueItemProvider = new IntDataValueItemProvider(this);
		}

		return intDataValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.SubstitutableIntRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubstitutableIntRangeItemProvider substitutableIntRangeItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.SubstitutableIntRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubstitutableIntRangeAdapter() {
		if (substitutableIntRangeItemProvider == null) {
			substitutableIntRangeItemProvider = new SubstitutableIntRangeItemProvider(this);
		}

		return substitutableIntRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.LongDataValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongDataValueItemProvider longDataValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.LongDataValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongDataValueAdapter() {
		if (longDataValueItemProvider == null) {
			longDataValueItemProvider = new LongDataValueItemProvider(this);
		}

		return longDataValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.BoolDataValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoolDataValueItemProvider boolDataValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.BoolDataValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoolDataValueAdapter() {
		if (boolDataValueItemProvider == null) {
			boolDataValueItemProvider = new BoolDataValueItemProvider(this);
		}

		return boolDataValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.data.FloatDataValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatDataValueItemProvider floatDataValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.data.FloatDataValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFloatDataValueAdapter() {
		if (floatDataValueItemProvider == null) {
			floatDataValueItemProvider = new FloatDataValueItemProvider(this);
		}

		return floatDataValueItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataStructureItemProvider != null) dataStructureItemProvider.dispose();
		if (dataLeafItemProvider != null) dataLeafItemProvider.dispose();
		if (dataClassItemProvider != null) dataClassItemProvider.dispose();
		if (dataValueItemProvider != null) dataValueItemProvider.dispose();
		if (dataBindingItemProvider != null) dataBindingItemProvider.dispose();
		if (stepDataBindingItemProvider != null) stepDataBindingItemProvider.dispose();
		if (dataScenarioItemProvider != null) dataScenarioItemProvider.dispose();
		if (dataRangeItemProvider != null) dataRangeItemProvider.dispose();
		if (dataBagItemProvider != null) dataBagItemProvider.dispose();
		if (typedDataClassItemProvider != null) typedDataClassItemProvider.dispose();
		if (intDataValueItemProvider != null) intDataValueItemProvider.dispose();
		if (substitutableIntRangeItemProvider != null) substitutableIntRangeItemProvider.dispose();
		if (longDataValueItemProvider != null) longDataValueItemProvider.dispose();
		if (boolDataValueItemProvider != null) boolDataValueItemProvider.dispose();
		if (floatDataValueItemProvider != null) floatDataValueItemProvider.dispose();
	}

}
