/**
 */
package org.tud.inf.st.mbt.rules.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.tud.inf.st.mbt.rules.util.RulesAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RulesItemProviderAdapterFactory extends RulesAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RulesItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.Not} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotItemProvider notItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.Not}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotAdapter() {
		if (notItemProvider == null) {
			notItemProvider = new NotItemProvider(this);
		}

		return notItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.And} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AndItemProvider andItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.And}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAndAdapter() {
		if (andItemProvider == null) {
			andItemProvider = new AndItemProvider(this);
		}

		return andItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.Or} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrItemProvider orItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.Or}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrAdapter() {
		if (orItemProvider == null) {
			orItemProvider = new OrItemProvider(this);
		}

		return orItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.SubPredicate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubPredicateItemProvider subPredicateItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.SubPredicate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubPredicateAdapter() {
		if (subPredicateItemProvider == null) {
			subPredicateItemProvider = new SubPredicateItemProvider(this);
		}

		return subPredicateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.ReasonableAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReasonableAtomItemProvider reasonableAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.ReasonableAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReasonableAtomAdapter() {
		if (reasonableAtomItemProvider == null) {
			reasonableAtomItemProvider = new ReasonableAtomItemProvider(this);
		}

		return reasonableAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.Xor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XorItemProvider xorItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.Xor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXorAdapter() {
		if (xorItemProvider == null) {
			xorItemProvider = new XorItemProvider(this);
		}

		return xorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.Implication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImplicationItemProvider implicationItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.Implication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createImplicationAdapter() {
		if (implicationItemProvider == null) {
			implicationItemProvider = new ImplicationItemProvider(this);
		}

		return implicationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.FeatureAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureAtomItemProvider featureAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.FeatureAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAtomAdapter() {
		if (featureAtomItemProvider == null) {
			featureAtomItemProvider = new FeatureAtomItemProvider(this);
		}

		return featureAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.True} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrueItemProvider trueItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.True}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrueAdapter() {
		if (trueItemProvider == null) {
			trueItemProvider = new TrueItemProvider(this);
		}

		return trueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.TokenAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TokenAtomItemProvider tokenAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.TokenAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTokenAtomAdapter() {
		if (tokenAtomItemProvider == null) {
			tokenAtomItemProvider = new TokenAtomItemProvider(this);
		}

		return tokenAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.InstructionPointerAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InstructionPointerAtomItemProvider instructionPointerAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.InstructionPointerAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInstructionPointerAtomAdapter() {
		if (instructionPointerAtomItemProvider == null) {
			instructionPointerAtomItemProvider = new InstructionPointerAtomItemProvider(this);
		}

		return instructionPointerAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.TimeAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeAtomItemProvider timeAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.TimeAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeAtomAdapter() {
		if (timeAtomItemProvider == null) {
			timeAtomItemProvider = new TimeAtomItemProvider(this);
		}

		return timeAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.RealTimeAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RealTimeAtomItemProvider realTimeAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.RealTimeAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRealTimeAtomAdapter() {
		if (realTimeAtomItemProvider == null) {
			realTimeAtomItemProvider = new RealTimeAtomItemProvider(this);
		}

		return realTimeAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.ConfigurationAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationAtomItemProvider configurationAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.ConfigurationAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAtomAdapter() {
		if (configurationAtomItemProvider == null) {
			configurationAtomItemProvider = new ConfigurationAtomItemProvider(this);
		}

		return configurationAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.DataAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAtomItemProvider dataAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.DataAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAtomAdapter() {
		if (dataAtomItemProvider == null) {
			dataAtomItemProvider = new DataAtomItemProvider(this);
		}

		return dataAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.LogicFunctionAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicFunctionAtomItemProvider logicFunctionAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.LogicFunctionAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicFunctionAtomAdapter() {
		if (logicFunctionAtomItemProvider == null) {
			logicFunctionAtomItemProvider = new LogicFunctionAtomItemProvider(this);
		}

		return logicFunctionAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.BagElementAssignedAtom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BagElementAssignedAtomItemProvider bagElementAssignedAtomItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.BagElementAssignedAtom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBagElementAssignedAtomAdapter() {
		if (bagElementAssignedAtomItemProvider == null) {
			bagElementAssignedAtomItemProvider = new BagElementAssignedAtomItemProvider(this);
		}

		return bagElementAssignedAtomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.mbt.rules.ContextEntry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContextEntryItemProvider contextEntryItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.mbt.rules.ContextEntry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContextEntryAdapter() {
		if (contextEntryItemProvider == null) {
			contextEntryItemProvider = new ContextEntryItemProvider(this);
		}

		return contextEntryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (subPredicateItemProvider != null) subPredicateItemProvider.dispose();
		if (reasonableAtomItemProvider != null) reasonableAtomItemProvider.dispose();
		if (notItemProvider != null) notItemProvider.dispose();
		if (andItemProvider != null) andItemProvider.dispose();
		if (orItemProvider != null) orItemProvider.dispose();
		if (xorItemProvider != null) xorItemProvider.dispose();
		if (implicationItemProvider != null) implicationItemProvider.dispose();
		if (trueItemProvider != null) trueItemProvider.dispose();
		if (featureAtomItemProvider != null) featureAtomItemProvider.dispose();
		if (dataAtomItemProvider != null) dataAtomItemProvider.dispose();
		if (logicFunctionAtomItemProvider != null) logicFunctionAtomItemProvider.dispose();
		if (tokenAtomItemProvider != null) tokenAtomItemProvider.dispose();
		if (instructionPointerAtomItemProvider != null) instructionPointerAtomItemProvider.dispose();
		if (configurationAtomItemProvider != null) configurationAtomItemProvider.dispose();
		if (bagElementAssignedAtomItemProvider != null) bagElementAssignedAtomItemProvider.dispose();
		if (timeAtomItemProvider != null) timeAtomItemProvider.dispose();
		if (realTimeAtomItemProvider != null) realTimeAtomItemProvider.dispose();
		if (contextEntryItemProvider != null) contextEntryItemProvider.dispose();
	}

}
