import "platform:/plugin/org.tud.inf.st.mbt.emf/syntax/rules.pccs";

syntax functions f:"http://st.inf.tud.org/mbt/functions";
operators{"(" ")"  "." "=" "[" "]" "+" "-" "*" "/" ">" "<" "," "$" "?" "|" "&"}
keywords{"in" "tokens" "time" "size" "next" "free" "version" "index" "count" "object" "Function"}   
parsers{     
	func ::= or(pfarith pfdata pflog pfnode);	
	
	pflog ::= or(fpredicate plarger plower pequal psub ref_log);
	
	plarger ::= (pfarith^l ">" pfarith^r) => f:LargerThanFunction(_left = l _right = r);	
	plower ::= (pfarith^l "<" pfarith^r) => f:LowerThanFunction(_left = l _right = r);	
	pequal ::= (pfarith^l "=" pfarith^r) => f:EqualFunction(_left = l _right = r);	
	psub ::= (pfdata^l "in"  pfdata^r) => f:SubClassFunction(sub=l in=r);	
	fpredicate ::= rules.rule => f:PredicateFunction(predicate=this);	
	
	ref_log ::= ("&" (# ("."#)*)/"."^r) => f:LogicReferenceFunction(function = r);
	
	pfarith ::= {
		pfint pflong pffloat pftokens pftime pfbagsize pfbagnext pfbagfree pfbagindex pfbagcount
		"*" binary 10 left => f:MultiplyFunction(_left = _left _right = _right) 
		"/" binary 5 left => f:DivisionFunction(_left = _left _right = _right) 
		"+" binary 4 left => f:PlusFunction(_left = _left _right = _right) 
		"-" binary 4 left => f:MinusFunction(_left = _left _right = _right) 
		("(" pfarith^f ")") => f:SubFunction(operand=f)	
		ref_arith
		pfarithcase
	};
	
	ref_arith ::= ("&" (# ("."#)*)/"."^r) => f:ArithmetricReferenceFunction(function = r);
		
	pfint ::= ($i^i) => f:IntFunction(value=i);
	pflong ::= ($l^l) => f:LongFunction(value=l);
	pffloat ::= ($f^f) => f:FloatFunction(value=f);
	pftokens ::= ("tokens" "(" (# ("."#)*)/"."^p ")") => f:TokenFunction(place = p);
	pftime ::= ("time" "(" (# ("."#)*)/"."^c ")") => f:TimeFunction(consumer = c);
	
	pfarithcase ::= arithcase+ => f:ArtihmetricCaseFunction(cases=this);
	arithcase ::= ("|" rules.rule^c "=" pfarith^then) => f:ArithmetricCase(condition=c then=then);
	
	pfbagsize ::= ("size" "(" "$" (# ("."#)*)/"."^b ")") => f:BagSizeFunction(bag = b);
	pfbagnext ::= ("next" "(" "$" (# ("."#)*)/"."^b ")") => f:BagNextFunction(bag = b);
	pfbagfree ::= ("free" "(" "$" (# ("."#)*)/"."^b ")") => f:BagFirstFreeFunction(bag = b);
	pfbagindex ::= ("index" "(" "$" (# ("."#)*)/"."^b "," pfdata^n ")") => f:BagIndexFunction(bag = b needle=n);
	pfbagcount ::= ("count" "(" "$" (# ("."#)*)/"."^b "," pfdata^n ")") => f:BagCountFunction(bag = b needle=n);
	
	pfnode ::= or(pfnnode pfnbag pfnodecase);
	pfnnode ::= ("$" (# ("."#)*)/"."^n) => f:DataNodeFunction(data = n);
	pfnbag ::= ("$" (# ("."#)*)/"."^b "[" pfarith^i "]") => f:BagElementFunction(data = b idx = i);
	
	ref_node ::= ("&" (# ("."#)*)/"."^r) => f:DataNodeReferenceFunction(function = r);
	
	pfnodecase ::= nodecase+ => f:DataNodeCaseFunction(cases=this);
	nodecase ::= ("|" rule^c "=" pfnode^then) => f:DataNodeCase(condition=c then=then);
	
	pfdata ::= or(pfvalue pfnodevalue pfdatacase ref_value);
	pfvalue ::=  ((# ("."#)*)/"."^n) => f:DataValueFunction(value=n);
	pfnodevalue ::= pfnode => f:DataNodeValueFunction(node=this);
	
	ref_value ::= ("&" (# ("."#)*)/"."^r) => f:ValueReferenceFunction(function = r);
	
	pfdatacase ::= datacase+ => f:ValueCaseFunction(cases=this);
	datacase ::= ("|" rule^c "=" pfdata^then) => f:ValueCase(condition=c then=then);
	
	var_func ::= ("Function" "?" #^id) => f:FunctionVariable(id=id); 	
} start func 