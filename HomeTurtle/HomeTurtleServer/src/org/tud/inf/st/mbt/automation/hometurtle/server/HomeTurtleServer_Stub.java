// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package org.tud.inf.st.mbt.automation.hometurtle.server;

public final class HomeTurtleServer_Stub
    extends java.rmi.server.RemoteStub
    implements org.tud.inf.st.mbt.automation.hometurtle.server.IHomeTurtleTestDriver
{
    private static final long serialVersionUID = 2;
    
    private static java.lang.reflect.Method $method_driveForeward_0;
    private static java.lang.reflect.Method $method_spinLeft_1;
    private static java.lang.reflect.Method $method_spinRight_2;
    
    static {
	try {
	    $method_driveForeward_0 = org.tud.inf.st.mbt.automation.hometurtle.server.IHomeTurtleTestDriver.class.getMethod("driveForeward", new java.lang.Class[] {int.class, int.class});
	    $method_spinLeft_1 = org.tud.inf.st.mbt.automation.hometurtle.server.IHomeTurtleTestDriver.class.getMethod("spinLeft", new java.lang.Class[] {int.class, int.class});
	    $method_spinRight_2 = org.tud.inf.st.mbt.automation.hometurtle.server.IHomeTurtleTestDriver.class.getMethod("spinRight", new java.lang.Class[] {int.class, int.class});
	} catch (java.lang.NoSuchMethodException e) {
	    throw new java.lang.NoSuchMethodError(
		"stub class initialization failed");
	}
    }
    
    // constructors
    public HomeTurtleServer_Stub(java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of driveForeward(int, int)
    public void driveForeward(int $param_int_1, int $param_int_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_driveForeward_0, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2)}, 177709268612984977L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of spinLeft(int, int)
    public void spinLeft(int $param_int_1, int $param_int_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_spinLeft_1, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2)}, 1056591663423922289L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of spinRight(int, int)
    public void spinRight(int $param_int_1, int $param_int_2)
	throws java.rmi.RemoteException
    {
	try {
	    ref.invoke(this, $method_spinRight_2, new java.lang.Object[] {new java.lang.Integer($param_int_1), new java.lang.Integer($param_int_2)}, -5159863467148562895L);
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
