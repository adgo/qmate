/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package org.tud.inf.st.pccs.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.tud.inf.st.pccs.util.PccsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PccsItemProviderAdapterFactory extends PccsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection supportedTypes = new ArrayList();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PccsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.OrParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrParserItemProvider orParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.OrParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOrParserAdapter() {
		if (orParserItemProvider == null) {
			orParserItemProvider = new OrParserItemProvider(this);
		}

		return orParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.SequenceParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SequenceParserItemProvider sequenceParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.SequenceParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createSequenceParserAdapter() {
		if (sequenceParserItemProvider == null) {
			sequenceParserItemProvider = new SequenceParserItemProvider(this);
		}

		return sequenceParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.ConcreteSyntax} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConcreteSyntaxItemProvider concreteSyntaxItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.ConcreteSyntax}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createConcreteSyntaxAdapter() {
		if (concreteSyntaxItemProvider == null) {
			concreteSyntaxItemProvider = new ConcreteSyntaxItemProvider(this);
		}

		return concreteSyntaxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.TerminalParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminalParserItemProvider terminalParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.TerminalParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTerminalParserAdapter() {
		if (terminalParserItemProvider == null) {
			terminalParserItemProvider = new TerminalParserItemProvider(this);
		}

		return terminalParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.Terminal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TerminalItemProvider terminalItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.Terminal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createTerminalAdapter() {
		if (terminalItemProvider == null) {
			terminalItemProvider = new TerminalItemProvider(this);
		}

		return terminalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.RefParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefParserItemProvider refParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.RefParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRefParserAdapter() {
		if (refParserItemProvider == null) {
			refParserItemProvider = new RefParserItemProvider(this);
		}

		return refParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.ParserDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParserDefinitionItemProvider parserDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.ParserDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createParserDefinitionAdapter() {
		if (parserDefinitionItemProvider == null) {
			parserDefinitionItemProvider = new ParserDefinitionItemProvider(this);
		}

		return parserDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.IdentifierParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifierParserItemProvider identifierParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.IdentifierParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIdentifierParserAdapter() {
		if (identifierParserItemProvider == null) {
			identifierParserItemProvider = new IdentifierParserItemProvider(this);
		}

		return identifierParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.StringParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringParserItemProvider stringParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.StringParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createStringParserAdapter() {
		if (stringParserItemProvider == null) {
			stringParserItemProvider = new StringParserItemProvider(this);
		}

		return stringParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.EcoreMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EcoreMappingItemProvider ecoreMappingItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.EcoreMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createEcoreMappingAdapter() {
		if (ecoreMappingItemProvider == null) {
			ecoreMappingItemProvider = new EcoreMappingItemProvider(this);
		}

		return ecoreMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.Assignment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AssignmentItemProvider assignmentItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.Assignment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAssignmentAdapter() {
		if (assignmentItemProvider == null) {
			assignmentItemProvider = new AssignmentItemProvider(this);
		}

		return assignmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.AsQName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AsQNameItemProvider asQNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.AsQName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createAsQNameAdapter() {
		if (asQNameItemProvider == null) {
			asQNameItemProvider = new AsQNameItemProvider(this);
		}

		return asQNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.IdentityParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentityParserItemProvider identityParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.IdentityParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIdentityParserAdapter() {
		if (identityParserItemProvider == null) {
			identityParserItemProvider = new IdentityParserItemProvider(this);
		}

		return identityParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.IntParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntParserItemProvider intParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.IntParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createIntParserAdapter() {
		if (intParserItemProvider == null) {
			intParserItemProvider = new IntParserItemProvider(this);
		}

		return intParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.DoubleParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DoubleParserItemProvider doubleParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.DoubleParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createDoubleParserAdapter() {
		if (doubleParserItemProvider == null) {
			doubleParserItemProvider = new DoubleParserItemProvider(this);
		}

		return doubleParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.FloatParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FloatParserItemProvider floatParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.FloatParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createFloatParserAdapter() {
		if (floatParserItemProvider == null) {
			floatParserItemProvider = new FloatParserItemProvider(this);
		}

		return floatParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.ReferenceMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceMappingItemProvider referenceMappingItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.ReferenceMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createReferenceMappingAdapter() {
		if (referenceMappingItemProvider == null) {
			referenceMappingItemProvider = new ReferenceMappingItemProvider(this);
		}

		return referenceMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.OperatorTableParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorTableParserItemProvider operatorTableParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.OperatorTableParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createOperatorTableParserAdapter() {
		if (operatorTableParserItemProvider == null) {
			operatorTableParserItemProvider = new OperatorTableParserItemProvider(this);
		}

		return operatorTableParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.PrefixOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixOperatorItemProvider prefixOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.PrefixOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPrefixOperatorAdapter() {
		if (prefixOperatorItemProvider == null) {
			prefixOperatorItemProvider = new PrefixOperatorItemProvider(this);
		}

		return prefixOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.PostfixOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PostfixOperatorItemProvider postfixOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.PostfixOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createPostfixOperatorAdapter() {
		if (postfixOperatorItemProvider == null) {
			postfixOperatorItemProvider = new PostfixOperatorItemProvider(this);
		}

		return postfixOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.Unit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnitItemProvider unitItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.Unit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createUnitAdapter() {
		if (unitItemProvider == null) {
			unitItemProvider = new UnitItemProvider(this);
		}

		return unitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.LeftAssociativeOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LeftAssociativeOperatorItemProvider leftAssociativeOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.LeftAssociativeOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLeftAssociativeOperatorAdapter() {
		if (leftAssociativeOperatorItemProvider == null) {
			leftAssociativeOperatorItemProvider = new LeftAssociativeOperatorItemProvider(this);
		}

		return leftAssociativeOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.RightAssociativeOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RightAssociativeOperatorItemProvider rightAssociativeOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.RightAssociativeOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRightAssociativeOperatorAdapter() {
		if (rightAssociativeOperatorItemProvider == null) {
			rightAssociativeOperatorItemProvider = new RightAssociativeOperatorItemProvider(this);
		}

		return rightAssociativeOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.NonAssociativeOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonAssociativeOperatorItemProvider nonAssociativeOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.NonAssociativeOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createNonAssociativeOperatorAdapter() {
		if (nonAssociativeOperatorItemProvider == null) {
			nonAssociativeOperatorItemProvider = new NonAssociativeOperatorItemProvider(this);
		}

		return nonAssociativeOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.MetaModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetaModelItemProvider metaModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.MetaModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createMetaModelAdapter() {
		if (metaModelItemProvider == null) {
			metaModelItemProvider = new MetaModelItemProvider(this);
		}

		return metaModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.StringValueMapping} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringValueMappingItemProvider stringValueMappingItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.StringValueMapping}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createStringValueMappingAdapter() {
		if (stringValueMappingItemProvider == null) {
			stringValueMappingItemProvider = new StringValueMappingItemProvider(this);
		}

		return stringValueMappingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.RegularExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegularExpressionItemProvider regularExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.RegularExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createRegularExpressionAdapter() {
		if (regularExpressionItemProvider == null) {
			regularExpressionItemProvider = new RegularExpressionItemProvider(this);
		}

		return regularExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.QualifiedName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifiedNameItemProvider qualifiedNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.QualifiedName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createQualifiedNameAdapter() {
		if (qualifiedNameItemProvider == null) {
			qualifiedNameItemProvider = new QualifiedNameItemProvider(this);
		}

		return qualifiedNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.LongParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongParserItemProvider longParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.LongParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createLongParserAdapter() {
		if (longParserItemProvider == null) {
			longParserItemProvider = new LongParserItemProvider(this);
		}

		return longParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.BoolParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoolParserItemProvider boolParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.BoolParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createBoolParserAdapter() {
		if (boolParserItemProvider == null) {
			boolParserItemProvider = new BoolParserItemProvider(this);
		}

		return boolParserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.tud.inf.st.pccs.ImportParser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ImportParserItemProvider importParserItemProvider;

	/**
	 * This creates an adapter for a {@link org.tud.inf.st.pccs.ImportParser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter createImportParserAdapter() {
		if (importParserItemProvider == null) {
			importParserItemProvider = new ImportParserItemProvider(this);
		}

		return importParserItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class) || (((Class)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (orParserItemProvider != null) orParserItemProvider.dispose();
		if (sequenceParserItemProvider != null) sequenceParserItemProvider.dispose();
		if (concreteSyntaxItemProvider != null) concreteSyntaxItemProvider.dispose();
		if (terminalParserItemProvider != null) terminalParserItemProvider.dispose();
		if (terminalItemProvider != null) terminalItemProvider.dispose();
		if (refParserItemProvider != null) refParserItemProvider.dispose();
		if (parserDefinitionItemProvider != null) parserDefinitionItemProvider.dispose();
		if (identifierParserItemProvider != null) identifierParserItemProvider.dispose();
		if (stringParserItemProvider != null) stringParserItemProvider.dispose();
		if (ecoreMappingItemProvider != null) ecoreMappingItemProvider.dispose();
		if (assignmentItemProvider != null) assignmentItemProvider.dispose();
		if (asQNameItemProvider != null) asQNameItemProvider.dispose();
		if (identityParserItemProvider != null) identityParserItemProvider.dispose();
		if (intParserItemProvider != null) intParserItemProvider.dispose();
		if (doubleParserItemProvider != null) doubleParserItemProvider.dispose();
		if (floatParserItemProvider != null) floatParserItemProvider.dispose();
		if (referenceMappingItemProvider != null) referenceMappingItemProvider.dispose();
		if (operatorTableParserItemProvider != null) operatorTableParserItemProvider.dispose();
		if (prefixOperatorItemProvider != null) prefixOperatorItemProvider.dispose();
		if (postfixOperatorItemProvider != null) postfixOperatorItemProvider.dispose();
		if (unitItemProvider != null) unitItemProvider.dispose();
		if (leftAssociativeOperatorItemProvider != null) leftAssociativeOperatorItemProvider.dispose();
		if (rightAssociativeOperatorItemProvider != null) rightAssociativeOperatorItemProvider.dispose();
		if (nonAssociativeOperatorItemProvider != null) nonAssociativeOperatorItemProvider.dispose();
		if (metaModelItemProvider != null) metaModelItemProvider.dispose();
		if (stringValueMappingItemProvider != null) stringValueMappingItemProvider.dispose();
		if (regularExpressionItemProvider != null) regularExpressionItemProvider.dispose();
		if (qualifiedNameItemProvider != null) qualifiedNameItemProvider.dispose();
		if (longParserItemProvider != null) longParserItemProvider.dispose();
		if (boolParserItemProvider != null) boolParserItemProvider.dispose();
		if (importParserItemProvider != null) importParserItemProvider.dispose();
	}

}
